/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AuctionX","structs":{},"methods":[{"name":"create_application","args":[{"type":"asset","name":"asset_id"},{"type":"uint64","name":"floor_price"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_floor_price","args":[{"type":"uint64","name":"floor_price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"pay","name":"mbrpay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"place_bid","args":[{"type":"pay","name":"bid_payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"accept_bid","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"reject_bid","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="},"floorprice":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zmxvb3JwcmljZQ=="},"highest_bid":{"keyType":"AVMString","valueType":"AVMUint64","key":"aGlnaGVzdF9iaWQ="},"highest_bidder":{"keyType":"AVMString","valueType":"AVMBytes","key":"aGlnaGVzdF9iaWRkZXI="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[157],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[169,181,193,215,237,253],"errorMessage":"OnCompletion is not NoOp"},{"pc":[257],"errorMessage":"can only call when creating"},{"pc":[160,172,184,196,218,240],"errorMessage":"can only call when not creating"},{"pc":[321,351,463,557],"errorMessage":"check self.assetid exists"},{"pc":[405],"errorMessage":"check self.floorprice exists"},{"pc":[396,425,488,528],"errorMessage":"check self.highest_bid exists"},{"pc":[411,421,455,467,516,524],"errorMessage":"check self.highest_bidder exists"},{"pc":[206,228],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAHoBwQmBQ5oaWdoZXN0X2JpZGRlcgtoaWdoZXN0X2JpZCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdhc3NldGlkCmZsb29ycHJpY2UxG0EAOIIHBIeMuz0EWLQMjAQVdFNaBNZcXG8EqkCbQQRtjViuBDOzSZ42GgCOBwBkAFQAPgAoABwAEAACIkMxGYEFEkQxGESIAX8jQzEZFEQxGESIAUsjQzEZFEQxGESIAQIjQzEZFEQxGEQxFiMJSTgQIxJEiACfI0MxGRREMRhEMRYjCUk4ECMSRIgASyNDMRkURDEYRDYaAReIACwjQzEZFEQxGBRENhoBF8AwNhoCF4gAAiNDigIAK4v+ZycEi/9nKSJnKCpniYoBADEAMgkSRCcEi/9niYoBADEAMgkSRDIKIitlRHAARQEURIv/OAcyChJEi/84CDIBMhAIEkSxIitlRDIKIrISshSyESWyECKyAbOJigEAi/84ADEAEkSL/zgHMgoSRIv/OAhJIillREsBDEQiJwRlRA9EIihlRCoTQQAUsSIoZUQiKWVEsgiyByOyECSyAbMpiwBnKDEAZ4kxADIJEkQiKGVEKhNEsSIrZUQiKGVEI7ISshSyESWyECSyAbOxMgkiKWVEsgiyByOyECSyAbMpImcoKmeJMQAyCRJEIihlRCoTRLEiKGVEIillRLIIsgcjshAksgGzKSJnKCpniTEAMgkSRLEiK2VEMglJshUishKyFLIRJbIQJLIBs7EyCUmyCSKyCLIHI7IQJLIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":6,"patch":1}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AuctionX contract
 */
export type AuctionXArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset,uint64)void': {
      assetId: bigint
      floorPrice: bigint | number
    }
    'set_floor_price(uint64)void': {
      floorPrice: bigint | number
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'place_bid(pay)void': {
      bidPayment: AppMethodCallTransactionArgument
    }
    'accept_bid()void': Record<string, never>
    'reject_bid()void': Record<string, never>
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset,uint64)void': [assetId: bigint, floorPrice: bigint | number]
    'set_floor_price(uint64)void': [floorPrice: bigint | number]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'place_bid(pay)void': [bidPayment: AppMethodCallTransactionArgument]
    'accept_bid()void': []
    'reject_bid()void': []
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type AuctionXReturns = {
  'create_application(asset,uint64)void': void
  'set_floor_price(uint64)void': void
  'opt_in_to_asset(pay)void': void
  'place_bid(pay)void': void
  'accept_bid()void': void
  'reject_bid()void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the AuctionX smart contract.
 */
export type AuctionXTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset,uint64)void' | 'create_application', {
      argsObj: AuctionXArgs['obj']['create_application(asset,uint64)void']
      argsTuple: AuctionXArgs['tuple']['create_application(asset,uint64)void']
      returns: AuctionXReturns['create_application(asset,uint64)void']
    }>
    & Record<'set_floor_price(uint64)void' | 'set_floor_price', {
      argsObj: AuctionXArgs['obj']['set_floor_price(uint64)void']
      argsTuple: AuctionXArgs['tuple']['set_floor_price(uint64)void']
      returns: AuctionXReturns['set_floor_price(uint64)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: AuctionXArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: AuctionXArgs['tuple']['opt_in_to_asset(pay)void']
      returns: AuctionXReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'place_bid(pay)void' | 'place_bid', {
      argsObj: AuctionXArgs['obj']['place_bid(pay)void']
      argsTuple: AuctionXArgs['tuple']['place_bid(pay)void']
      returns: AuctionXReturns['place_bid(pay)void']
    }>
    & Record<'accept_bid()void' | 'accept_bid', {
      argsObj: AuctionXArgs['obj']['accept_bid()void']
      argsTuple: AuctionXArgs['tuple']['accept_bid()void']
      returns: AuctionXReturns['accept_bid()void']
    }>
    & Record<'reject_bid()void' | 'reject_bid', {
      argsObj: AuctionXArgs['obj']['reject_bid()void']
      argsTuple: AuctionXArgs['tuple']['reject_bid()void']
      returns: AuctionXReturns['reject_bid()void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: AuctionXArgs['obj']['delete_application()void']
      argsTuple: AuctionXArgs['tuple']['delete_application()void']
      returns: AuctionXReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetid: bigint
        floorprice: bigint
        highestBid: bigint
        highestBidder: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AuctionXSignatures = keyof AuctionXTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AuctionXNonVoidMethodSignatures = keyof AuctionXTypes['methods'] extends infer T ? T extends keyof AuctionXTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AuctionX smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AuctionXSignatures> = AuctionXTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AuctionX smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AuctionXSignatures> = AuctionXTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AuctionXTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AuctionXCreateCallParams =
  | Expand<CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application(asset,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type AuctionXDeleteCallParams =
  | Expand<CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AuctionXDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AuctionXCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AuctionXDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AuctionX smart contract
 */
export abstract class AuctionXParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AuctionXCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset,uint64)void':
            return AuctionXParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AuctionX smart contract using the create_application(asset,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.floorPrice],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends AuctionXDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return AuctionXParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the AuctionX smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_floor_price(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setFloorPrice(params: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_floor_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.floorPrice],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the place_bid(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static placeBid(params: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'place_bid(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.bidPayment],
    }
  }
  /**
   * Constructs a no op call for the accept_bid()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static acceptBid(params: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accept_bid()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reject_bid()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rejectBid(params: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reject_bid()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AuctionX smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AuctionXFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AuctionXFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AuctionXClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AuctionXClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AuctionX smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AuctionXDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AuctionXParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AuctionXCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? AuctionXParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (AuctionXDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AuctionXClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AuctionX smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AuctionXParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the AuctionX smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(AuctionXParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AuctionX smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AuctionXParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AuctionX smart contract using an ABI method call using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AuctionXArgs['obj']['create_application(asset,uint64)void'] | AuctionXArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AuctionXParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AuctionXReturns['create_application(asset,uint64)void']) }, appClient: new AuctionXClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AuctionX smart contract
 */
export class AuctionXClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AuctionXClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AuctionX app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AuctionXClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AuctionXNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AuctionXClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AuctionXClient> {
    return new AuctionXClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AuctionXClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AuctionXClient> {
    return new AuctionXClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AuctionX smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(AuctionXParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AuctionX smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AuctionX smart contract using the `set_floor_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setFloorPrice: (params: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AuctionXParamsFactory.setFloorPrice(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AuctionXParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `place_bid(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    placeBid: (params: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AuctionXParamsFactory.placeBid(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `accept_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    acceptBid: (params: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AuctionXParamsFactory.acceptBid(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `reject_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rejectBid: (params: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AuctionXParamsFactory.rejectBid(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AuctionX smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(AuctionXParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AuctionX smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AuctionX smart contract using the `set_floor_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setFloorPrice: (params: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AuctionXParamsFactory.setFloorPrice(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AuctionXParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `place_bid(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    placeBid: (params: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AuctionXParamsFactory.placeBid(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `accept_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    acceptBid: (params: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AuctionXParamsFactory.acceptBid(params))
    },

    /**
     * Makes a call to the AuctionX smart contract using the `reject_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rejectBid: (params: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AuctionXParamsFactory.rejectBid(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AuctionX smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(AuctionXParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | AuctionXReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AuctionX smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AuctionX smart contract using the `set_floor_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setFloorPrice: async (params: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AuctionXParamsFactory.setFloorPrice(params))
      return {...result, return: result.return as unknown as (undefined | AuctionXReturns['set_floor_price(uint64)void'])}
    },

    /**
     * Makes a call to the AuctionX smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AuctionXParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | AuctionXReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the AuctionX smart contract using the `place_bid(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    placeBid: async (params: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AuctionXParamsFactory.placeBid(params))
      return {...result, return: result.return as unknown as (undefined | AuctionXReturns['place_bid(pay)void'])}
    },

    /**
     * Makes a call to the AuctionX smart contract using the `accept_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    acceptBid: async (params: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AuctionXParamsFactory.acceptBid(params))
      return {...result, return: result.return as unknown as (undefined | AuctionXReturns['accept_bid()void'])}
    },

    /**
     * Makes a call to the AuctionX smart contract using the `reject_bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rejectBid: async (params: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AuctionXParamsFactory.rejectBid(params))
      return {...result, return: result.return as unknown as (undefined | AuctionXReturns['reject_bid()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AuctionXClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AuctionX app
   */
  state = {
    /**
     * Methods to access global state for the current AuctionX app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetid: result.assetid,
          floorprice: result.floorprice,
          highestBid: result.highest_bid,
          highestBidder: new BinaryStateValue(result.highest_bidder),
        }
      },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
      /**
       * Get the current value of the floorprice key in global state
       */
      floorprice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("floorprice")) as bigint | undefined },
      /**
       * Get the current value of the highest_bid key in global state
       */
      highestBid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("highest_bid")) as bigint | undefined },
      /**
       * Get the current value of the highest_bidder key in global state
       */
      highestBidder: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("highest_bidder")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): AuctionXComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_floor_price(uint64)void method call against the AuctionX contract
       */
      setFloorPrice(params: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setFloorPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(pay)void method call against the AuctionX contract
       */
      optInToAsset(params: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a place_bid(pay)void method call against the AuctionX contract
       */
      placeBid(params: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.placeBid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a accept_bid()void method call against the AuctionX contract
       */
      acceptBid(params: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.acceptBid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reject_bid()void method call against the AuctionX contract
       */
      rejectBid(params: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rejectBid(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AuctionX contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AuctionXComposer
  }
}
export type AuctionXComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_floor_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFloorPrice(params?: CallParams<AuctionXArgs['obj']['set_floor_price(uint64)void'] | AuctionXArgs['tuple']['set_floor_price(uint64)void']>): AuctionXComposer<[...TReturns, AuctionXReturns['set_floor_price(uint64)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<AuctionXArgs['obj']['opt_in_to_asset(pay)void'] | AuctionXArgs['tuple']['opt_in_to_asset(pay)void']>): AuctionXComposer<[...TReturns, AuctionXReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the place_bid(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  placeBid(params?: CallParams<AuctionXArgs['obj']['place_bid(pay)void'] | AuctionXArgs['tuple']['place_bid(pay)void']>): AuctionXComposer<[...TReturns, AuctionXReturns['place_bid(pay)void'] | undefined]>

  /**
   * Calls the accept_bid()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  acceptBid(params?: CallParams<AuctionXArgs['obj']['accept_bid()void'] | AuctionXArgs['tuple']['accept_bid()void']>): AuctionXComposer<[...TReturns, AuctionXReturns['accept_bid()void'] | undefined]>

  /**
   * Calls the reject_bid()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectBid(params?: CallParams<AuctionXArgs['obj']['reject_bid()void'] | AuctionXArgs['tuple']['reject_bid()void']>): AuctionXComposer<[...TReturns, AuctionXReturns['reject_bid()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AuctionX smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<AuctionXArgs['obj']['delete_application()void'] | AuctionXArgs['tuple']['delete_application()void']>): AuctionXComposer<[...TReturns, AuctionXReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AuctionX smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AuctionXComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AuctionXComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AuctionXComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AuctionXComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AuctionXComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AuctionXComposerResults<TReturns>>
}
export type AuctionXComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

