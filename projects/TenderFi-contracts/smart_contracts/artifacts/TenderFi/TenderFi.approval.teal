#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 1000 4
    bytecblock "highest_bidder" "highest_bid" base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) "assetid" "floorprice"
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0x878cbb3d 0x58b40c8c 0x1574535a 0xd65c5c6f 0xaa409b41 0x6d8d58ae 0x33b3499e // method "create_application(asset,uint64)void", method "set_floor_price(uint64)void", method "opt_in_to_asset(pay)void", method "place_bid(pay)void", method "accept_bid()void", method "reject_bid()void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_set_floor_price_route@4 main_opt_in_to_asset_route@5 main_place_bid_route@6 main_accept_bid_route@7 main_reject_bid_route@8 main_delete_application_route@9

main_after_if_else@13:
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    intc_0 // 0
    return

main_delete_application_route@9:
    // smart_contracts/auction_x/contract.py:102-103
    // # Delete the app & take your assets and profit back
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_reject_bid_route@8:
    // smart_contracts/auction_x/contract.py:85-86
    // # Reject the highest bid and refund the bidder
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub reject_bid
    intc_1 // 1
    return

main_accept_bid_route@7:
    // smart_contracts/auction_x/contract.py:60-61
    // # Accept the highest bid
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub accept_bid
    intc_1 // 1
    return

main_place_bid_route@6:
    // smart_contracts/auction_x/contract.py:40-41
    // # Place a bid
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/auction_x/contract.py:40-41
    // # Place a bid
    // @abimethod()
    callsub place_bid
    intc_1 // 1
    return

main_opt_in_to_asset_route@5:
    // smart_contracts/auction_x/contract.py:25-26
    // # Opt in to the asset that will be sold
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/auction_x/contract.py:25-26
    // # Opt in to the asset that will be sold
    // @abimethod()
    callsub opt_in_to_asset
    intc_1 // 1
    return

main_set_floor_price_route@4:
    // smart_contracts/auction_x/contract.py:19-20
    // # Update the floor price
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/auction_x/contract.py:19-20
    // # Update the floor price
    // @abimethod()
    callsub set_floor_price
    intc_1 // 1
    return

main_create_application_route@3:
    // smart_contracts/auction_x/contract.py:11-12
    // # Create the app
    // @abimethod(allow_actions=["NoOp"], create = "require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/auction_x/contract.py:5
    // class AuctionX(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/auction_x/contract.py:11-12
    // # Create the app
    // @abimethod(allow_actions=["NoOp"], create = "require")
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.auction_x.contract.AuctionX.create_application(asset_id: uint64, floor_price: uint64) -> void:
create_application:
    // smart_contracts/auction_x/contract.py:11-13
    // # Create the app
    // @abimethod(allow_actions=["NoOp"], create = "require")
    // def create_application(self, asset_id: Asset, floor_price: UInt64) -> None:
    proto 2 0
    // smart_contracts/auction_x/contract.py:14
    // self.assetid = asset_id.id
    bytec_3 // "assetid"
    frame_dig -2
    app_global_put
    // smart_contracts/auction_x/contract.py:15
    // self.floorprice = floor_price
    bytec 4 // "floorprice"
    frame_dig -1
    app_global_put
    // smart_contracts/auction_x/contract.py:16
    // self.highest_bid = UInt64(0)
    bytec_1 // "highest_bid"
    intc_0 // 0
    app_global_put
    // smart_contracts/auction_x/contract.py:17
    // self.highest_bidder = Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ")
    bytec_0 // "highest_bidder"
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    app_global_put
    retsub


// smart_contracts.auction_x.contract.AuctionX.set_floor_price(floor_price: uint64) -> void:
set_floor_price:
    // smart_contracts/auction_x/contract.py:19-21
    // # Update the floor price
    // @abimethod()
    // def set_floor_price(self, floor_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/auction_x/contract.py:22
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:23
    // self.floorprice = floor_price
    bytec 4 // "floorprice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.auction_x.contract.AuctionX.opt_in_to_asset(mbrpay: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/auction_x/contract.py:25-27
    // # Opt in to the asset that will be sold
    // @abimethod()
    // def opt_in_to_asset(self, mbrpay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/auction_x/contract.py:28
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:29
    // assert not Global.current_application_address.is_opted_in(Asset(self.assetid))
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_3 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/auction_x/contract.py:31
    // assert mbrpay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:32
    // assert mbrpay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/auction_x/contract.py:34-38
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:35
    // xfer_asset=self.assetid,
    intc_0 // 0
    bytec_3 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    // smart_contracts/auction_x/contract.py:36
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/auction_x/contract.py:37
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/auction_x/contract.py:34
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:34-38
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.auction_x.contract.AuctionX.place_bid(bid_payment: uint64) -> void:
place_bid:
    // smart_contracts/auction_x/contract.py:40-42
    // # Place a bid
    // @abimethod()
    // def place_bid(self, bid_payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/auction_x/contract.py:43
    // assert bid_payment.sender == Txn.sender
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/auction_x/contract.py:44
    // assert bid_payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:45
    // assert bid_payment.amount > self.highest_bid
    frame_dig -1
    gtxns Amount
    dup
    intc_0 // 0
    bytec_1 // "highest_bid"
    app_global_get_ex
    assert // check self.highest_bid exists
    dig 1
    <
    assert
    // smart_contracts/auction_x/contract.py:46
    // assert bid_payment.amount >= self.floorprice
    intc_0 // 0
    bytec 4 // "floorprice"
    app_global_get_ex
    assert // check self.floorprice exists
    >=
    assert
    // smart_contracts/auction_x/contract.py:48-49
    // # Refund the previous highest bidder
    // if self.highest_bidder != Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"):
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    !=
    bz place_bid_after_if_else@3
    // smart_contracts/auction_x/contract.py:50-54
    // itxn.Payment(
    //     receiver=self.highest_bidder,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:51
    // receiver=self.highest_bidder,
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    // smart_contracts/auction_x/contract.py:52
    // amount=self.highest_bid,
    intc_0 // 0
    bytec_1 // "highest_bid"
    app_global_get_ex
    assert // check self.highest_bid exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/auction_x/contract.py:50
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:53
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:50-54
    // itxn.Payment(
    //     receiver=self.highest_bidder,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_submit

place_bid_after_if_else@3:
    // smart_contracts/auction_x/contract.py:56-57
    // # Update the highest bid and bidder
    // self.highest_bid = bid_payment.amount
    bytec_1 // "highest_bid"
    frame_dig 0
    app_global_put
    // smart_contracts/auction_x/contract.py:58
    // self.highest_bidder = Txn.sender
    bytec_0 // "highest_bidder"
    txn Sender
    app_global_put
    retsub


// smart_contracts.auction_x.contract.AuctionX.accept_bid() -> void:
accept_bid:
    // smart_contracts/auction_x/contract.py:63
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:64
    // assert self.highest_bidder != Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ")
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    !=
    assert
    // smart_contracts/auction_x/contract.py:66-72
    // # Transfer the asset to the highest bidder
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=self.highest_bidder,
    //     asset_amount=1,  # Assuming the asset is non-fungible (1 unit)
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:68
    // xfer_asset=self.assetid,
    intc_0 // 0
    bytec_3 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    // smart_contracts/auction_x/contract.py:69
    // asset_receiver=self.highest_bidder,
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    // smart_contracts/auction_x/contract.py:70
    // asset_amount=1,  # Assuming the asset is non-fungible (1 unit)
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/auction_x/contract.py:66-67
    // # Transfer the asset to the highest bidder
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:71
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:66-72
    // # Transfer the asset to the highest bidder
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=self.highest_bidder,
    //     asset_amount=1,  # Assuming the asset is non-fungible (1 unit)
    //     fee=1_000,
    // ).submit()
    itxn_submit
    // smart_contracts/auction_x/contract.py:74-79
    // # Transfer the funds to the market creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:76
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/auction_x/contract.py:77
    // amount=self.highest_bid,
    intc_0 // 0
    bytec_1 // "highest_bid"
    app_global_get_ex
    assert // check self.highest_bid exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/auction_x/contract.py:74-75
    // # Transfer the funds to the market creator
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:78
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:74-79
    // # Transfer the funds to the market creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    // smart_contracts/auction_x/contract.py:81-82
    // # Reset the highest bid and bidder
    // self.highest_bid = UInt64(0)
    bytec_1 // "highest_bid"
    intc_0 // 0
    app_global_put
    // smart_contracts/auction_x/contract.py:83
    // self.highest_bidder = Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ")
    bytec_0 // "highest_bidder"
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    app_global_put
    retsub


// smart_contracts.auction_x.contract.AuctionX.reject_bid() -> void:
reject_bid:
    // smart_contracts/auction_x/contract.py:88
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:89
    // assert self.highest_bidder != Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ")
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    !=
    assert
    // smart_contracts/auction_x/contract.py:91-96
    // # Refund the highest bidder
    // itxn.Payment(
    //     receiver=self.highest_bidder,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:93
    // receiver=self.highest_bidder,
    intc_0 // 0
    bytec_0 // "highest_bidder"
    app_global_get_ex
    assert // check self.highest_bidder exists
    // smart_contracts/auction_x/contract.py:94
    // amount=self.highest_bid,
    intc_0 // 0
    bytec_1 // "highest_bid"
    app_global_get_ex
    assert // check self.highest_bid exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/auction_x/contract.py:91-92
    // # Refund the highest bidder
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:95
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:91-96
    // # Refund the highest bidder
    // itxn.Payment(
    //     receiver=self.highest_bidder,
    //     amount=self.highest_bid,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    // smart_contracts/auction_x/contract.py:98-99
    // # Reset the highest bid and bidder
    // self.highest_bid = UInt64(0)
    bytec_1 // "highest_bid"
    intc_0 // 0
    app_global_put
    // smart_contracts/auction_x/contract.py:100
    // self.highest_bidder = Account("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ")
    bytec_0 // "highest_bidder"
    bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    app_global_put
    retsub


// smart_contracts.auction_x.contract.AuctionX.delete_application() -> void:
delete_application:
    // smart_contracts/auction_x/contract.py:105-106
    // # Only allow the creator to delete the application
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/auction_x/contract.py:108-118
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Global.creator_address,
    //     # The amount is 0, but the asset_close_to field is set
    //     # This means that ALL assets are being sent to the asset_close_to address
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:110
    // xfer_asset=self.assetid,
    intc_0 // 0
    bytec_3 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    // smart_contracts/auction_x/contract.py:111
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/auction_x/contract.py:115-116
    // # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/auction_x/contract.py:112-114
    // # The amount is 0, but the asset_close_to field is set
    // # This means that ALL assets are being sent to the asset_close_to address
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/auction_x/contract.py:108-109
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:117
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:108-118
    // # Send all the unsold assets to the creator
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetid,
    //     asset_receiver=Global.creator_address,
    //     # The amount is 0, but the asset_close_to field is set
    //     # This means that ALL assets are being sent to the asset_close_to address
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    // smart_contracts/auction_x/contract.py:120-127
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     # Close the account to get back ALL the ALGO in the account
    //     close_remainder_to=Global.creator_address,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/auction_x/contract.py:122
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/auction_x/contract.py:124-125
    // # Close the account to get back ALL the ALGO in the account
    // close_remainder_to=Global.creator_address,
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/auction_x/contract.py:123
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/auction_x/contract.py:120-121
    // # Send the remaining balance to the creator
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/auction_x/contract.py:126
    // fee=1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/auction_x/contract.py:120-127
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     # Close the account to get back ALL the ALGO in the account
    //     close_remainder_to=Global.creator_address,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    retsub
