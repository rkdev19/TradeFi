{
  "version": 3,
  "sources": [
    "../../auction_x/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAkGK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AApCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoCK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;AAeK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAPL;;;AAAA;AAAA;;AAAA;;;AAAA;AAOK;;;AAAA;;AAAL;;;AAEQ;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAmB;AAAnB;AACA;AAAsB;AAAtB;;AAGR;;;AAEe;;AAAc;;AAAd;AAAP;AACA;;AAAA;;AAAA;;AAGR;;;AAEe;;AAAc;;AAAd;AAAP;AACW;;AAAqD;AAAA;AAAA;AAAA;AAArD;;AAAA;;AAAJ;AAAP;AAEO;;AAAA;;AAAmB;;AAAnB;AAAP;AACO;;AAAA;;AAAiB;;AAAqB;;AAArB;AAAjB;AAAP;AAEA;AACe;AAAA;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;AAAA;;;AAAA;;AAOR;;;AAEe;;AAAA;;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;;AAAA;AAAP;AAC6B;AAAA;;AAAA;AAAA;AAAtB;AAAP;AAGG;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAX;;;AACY;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;AAFX;;;AAGQ;;;AAHR;AAOJ;AAAA;;AAAA;AACA;AAAsB;;AAAtB;;AAKO;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AACF;;;;;;;AAHjB;;;AAIQ;;;AAJR;AAQA;AACa;;AACF;AAAA;AAAA;AAAA;;;;;AAFX;;;AAGQ;;;AAHR;AAOA;AAAmB;AAAnB;AACA;AAAsB;AAAtB;;AAKO;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAP;AAGA;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;AAFX;;;AAGQ;;;AAHR;AAOA;AAAmB;AAAnB;AACA;AAAsB;AAAtB;;AAMO;;AAAc;;AAAd;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;;AAKA;;;AAFF;;;;;;;AALjB;;;AAQQ;;;AARR;AAYA;AACa;;AAGU;;;AAFZ;;;;;AAFX;;;AAKQ;;;AALR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4"
    },
    "8": {
      "op": "bytecblock \"highest_bidder\" \"highest_bid\" base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) \"assetid\" \"floorprice\""
    },
    "89": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "91": {
      "op": "bz main_after_if_else@13",
      "stack_out": []
    },
    "94": {
      "op": "pushbytess 0x878cbb3d 0x58b40c8c 0x1574535a 0xd65c5c6f 0xaa409b41 0x6d8d58ae 0x33b3499e // method \"create_application(asset,uint64)void\", method \"set_floor_price(uint64)void\", method \"opt_in_to_asset(pay)void\", method \"place_bid(pay)void\", method \"accept_bid()void\", method \"reject_bid()void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(accept_bid()void)",
        "Method(create_application(asset,uint64)void)",
        "Method(delete_application()void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(place_bid(pay)void)",
        "Method(reject_bid()void)",
        "Method(set_floor_price(uint64)void)"
      ],
      "stack_out": [
        "Method(create_application(asset,uint64)void)",
        "Method(set_floor_price(uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(place_bid(pay)void)",
        "Method(accept_bid()void)",
        "Method(reject_bid()void)",
        "Method(delete_application()void)"
      ]
    },
    "131": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accept_bid()void)",
        "Method(create_application(asset,uint64)void)",
        "Method(delete_application()void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(place_bid(pay)void)",
        "Method(reject_bid()void)",
        "Method(set_floor_price(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(asset,uint64)void)",
        "Method(set_floor_price(uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(place_bid(pay)void)",
        "Method(accept_bid()void)",
        "Method(reject_bid()void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "134": {
      "op": "match main_create_application_route@3 main_set_floor_price_route@4 main_opt_in_to_asset_route@5 main_place_bid_route@6 main_accept_bid_route@7 main_reject_bid_route@8 main_delete_application_route@9",
      "stack_out": []
    },
    "150": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "block": "main_delete_application_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "154": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "DeleteApplication"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "157": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.delete_application",
      "op": "callsub delete_application"
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_reject_bid_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.reject_bid",
      "op": "callsub reject_bid"
    },
    "176": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "block": "main_accept_bid_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "180": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "184": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "185": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.accept_bid",
      "op": "callsub accept_bid"
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_place_bid_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "199": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "200": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "201": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "202": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "204": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "206": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "207": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.place_bid",
      "op": "callsub place_bid",
      "stack_out": []
    },
    "210": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": []
    },
    "212": {
      "block": "main_opt_in_to_asset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "215": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "216": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "218": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "219": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "222": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "223": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "224": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "226": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "228": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "229": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.opt_in_to_asset",
      "op": "callsub opt_in_to_asset",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "block": "main_set_floor_price_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "244": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "245": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.set_floor_price",
      "op": "callsub set_floor_price",
      "stack_out": []
    },
    "248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "return",
      "stack_out": []
    },
    "250": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "252": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "253": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "256": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "257": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "258": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "262": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "264": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "267": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "268": {
      "callsub": "smart_contracts.auction_x.contract.AuctionX.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.create_application",
      "params": {
        "asset_id#0": "uint64",
        "floor_price#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "276": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\""
      ],
      "stack_out": [
        "\"assetid\""
      ]
    },
    "277": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "bytec 4 // \"floorprice\"",
      "defined_out": [
        "\"floorprice\""
      ],
      "stack_out": [
        "\"floorprice\""
      ]
    },
    "282": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"floorprice\"",
        "floor_price#0 (copy)"
      ],
      "stack_out": [
        "\"floorprice\"",
        "floor_price#0 (copy)"
      ]
    },
    "284": {
      "op": "app_global_put",
      "stack_out": []
    },
    "285": {
      "op": "bytec_1 // \"highest_bid\"",
      "defined_out": [
        "\"highest_bid\""
      ],
      "stack_out": [
        "\"highest_bid\""
      ]
    },
    "286": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"highest_bid\"",
        "0"
      ],
      "stack_out": [
        "\"highest_bid\"",
        "0"
      ]
    },
    "287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "288": {
      "op": "bytec_0 // \"highest_bidder\"",
      "defined_out": [
        "\"highest_bidder\""
      ],
      "stack_out": [
        "\"highest_bidder\""
      ]
    },
    "289": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"highest_bidder\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"highest_bidder\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "290": {
      "op": "app_global_put",
      "stack_out": []
    },
    "291": {
      "retsub": true,
      "op": "retsub"
    },
    "292": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.set_floor_price",
      "params": {
        "floor_price#0": "uint64"
      },
      "block": "set_floor_price",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "295": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "300": {
      "op": "assert",
      "stack_out": []
    },
    "301": {
      "op": "bytec 4 // \"floorprice\"",
      "defined_out": [
        "\"floorprice\""
      ],
      "stack_out": [
        "\"floorprice\""
      ]
    },
    "303": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"floorprice\"",
        "floor_price#0 (copy)"
      ],
      "stack_out": [
        "\"floorprice\"",
        "floor_price#0 (copy)"
      ]
    },
    "305": {
      "op": "app_global_put",
      "stack_out": []
    },
    "306": {
      "retsub": true,
      "op": "retsub"
    },
    "307": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.opt_in_to_asset",
      "params": {
        "mbrpay#0": "uint64"
      },
      "block": "opt_in_to_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "310": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "315": {
      "op": "assert",
      "stack_out": []
    },
    "316": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "318": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "319": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"assetid\""
      ]
    },
    "320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "321": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "322": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "324": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "326": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "327": {
      "op": "assert",
      "stack_out": []
    },
    "328": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrpay#0 (copy)"
      ],
      "stack_out": [
        "mbrpay#0 (copy)"
      ]
    },
    "330": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "332": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "334": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "335": {
      "op": "assert",
      "stack_out": []
    },
    "336": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrpay#0 (copy)"
      ]
    },
    "338": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "340": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "342": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "344": {
      "op": "+",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "346": {
      "op": "assert",
      "stack_out": []
    },
    "347": {
      "op": "itxn_begin"
    },
    "348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "349": {
      "op": "bytec_3 // \"assetid\"",
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "350": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "351": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "352": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "354": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "355": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "357": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "359": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "361": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "362": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "364": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "365": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "367": {
      "op": "itxn_submit"
    },
    "368": {
      "retsub": true,
      "op": "retsub"
    },
    "369": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.place_bid",
      "params": {
        "bid_payment#0": "uint64"
      },
      "block": "place_bid",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "372": {
      "op": "frame_dig -1",
      "defined_out": [
        "bid_payment#0 (copy)"
      ],
      "stack_out": [
        "bid_payment#0 (copy)"
      ]
    },
    "374": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "379": {
      "op": "assert",
      "stack_out": []
    },
    "380": {
      "op": "frame_dig -1",
      "stack_out": [
        "bid_payment#0 (copy)"
      ]
    },
    "382": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "384": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "386": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "387": {
      "op": "assert",
      "stack_out": []
    },
    "388": {
      "op": "frame_dig -1",
      "stack_out": [
        "bid_payment#0 (copy)"
      ]
    },
    "390": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "393": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "0"
      ]
    },
    "394": {
      "op": "bytec_1 // \"highest_bid\"",
      "defined_out": [
        "\"highest_bid\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "0",
        "\"highest_bid\""
      ]
    },
    "395": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "396": {
      "error": "check self.highest_bid exists",
      "op": "assert // check self.highest_bid exists",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "397": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "399": {
      "op": "<",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "400": {
      "op": "assert",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "401": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "0"
      ]
    },
    "402": {
      "op": "bytec 4 // \"floorprice\"",
      "defined_out": [
        "\"floorprice\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "0",
        "\"floorprice\""
      ]
    },
    "404": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "405": {
      "error": "check self.floorprice exists",
      "op": "assert // check self.floorprice exists",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%1#0"
      ]
    },
    "406": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "407": {
      "op": "assert",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "409": {
      "op": "bytec_0 // \"highest_bidder\"",
      "defined_out": [
        "\"highest_bidder\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"highest_bidder\""
      ]
    },
    "410": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "411": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "412": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "413": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "414": {
      "op": "bz place_bid_after_if_else@3",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "417": {
      "op": "itxn_begin"
    },
    "418": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "419": {
      "op": "bytec_0 // \"highest_bidder\"",
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"highest_bidder\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "421": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "423": {
      "op": "bytec_1 // \"highest_bid\"",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "0",
        "\"highest_bid\""
      ]
    },
    "424": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "425": {
      "error": "check self.highest_bid exists",
      "op": "assert // check self.highest_bid exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "426": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "428": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "430": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "pay"
      ]
    },
    "431": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "433": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "1000"
      ]
    },
    "434": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "436": {
      "op": "itxn_submit"
    },
    "437": {
      "block": "place_bid_after_if_else@3",
      "stack_in": [
        "tmp%6#0"
      ],
      "op": "bytec_1 // \"highest_bid\"",
      "defined_out": [
        "\"highest_bid\""
      ],
      "stack_out": [
        "tmp%6#0",
        "\"highest_bid\""
      ]
    },
    "438": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"highest_bid\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"highest_bid\"",
        "tmp%6#0"
      ]
    },
    "440": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "441": {
      "op": "bytec_0 // \"highest_bidder\"",
      "defined_out": [
        "\"highest_bidder\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"highest_bidder\""
      ]
    },
    "442": {
      "op": "txn Sender",
      "defined_out": [
        "\"highest_bidder\"",
        "new_state_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"highest_bidder\"",
        "new_state_value%1#0"
      ]
    },
    "444": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "445": {
      "retsub": true,
      "op": "retsub"
    },
    "446": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.accept_bid",
      "params": {},
      "block": "accept_bid",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "451": {
      "op": "assert",
      "stack_out": []
    },
    "452": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "453": {
      "op": "bytec_0 // \"highest_bidder\"",
      "defined_out": [
        "\"highest_bidder\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"highest_bidder\""
      ]
    },
    "454": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "455": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "456": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "457": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "458": {
      "op": "assert",
      "stack_out": []
    },
    "459": {
      "op": "itxn_begin"
    },
    "460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "461": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "462": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "463": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "465": {
      "op": "bytec_0 // \"highest_bidder\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"highest_bidder\""
      ]
    },
    "466": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "467": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "468": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "469": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "471": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "473": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "475": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "476": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "478": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "479": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "481": {
      "op": "itxn_submit"
    },
    "482": {
      "op": "itxn_begin"
    },
    "483": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "485": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "486": {
      "op": "bytec_1 // \"highest_bid\"",
      "defined_out": [
        "\"highest_bid\"",
        "0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0",
        "\"highest_bid\""
      ]
    },
    "487": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "488": {
      "error": "check self.highest_bid exists",
      "op": "assert // check self.highest_bid exists",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "489": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "491": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "493": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "494": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "496": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "497": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "499": {
      "op": "itxn_submit"
    },
    "500": {
      "op": "bytec_1 // \"highest_bid\"",
      "stack_out": [
        "\"highest_bid\""
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"highest_bid\"",
        "0"
      ]
    },
    "502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "503": {
      "op": "bytec_0 // \"highest_bidder\"",
      "stack_out": [
        "\"highest_bidder\""
      ]
    },
    "504": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "\"highest_bidder\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "505": {
      "op": "app_global_put",
      "stack_out": []
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.reject_bid",
      "params": {},
      "block": "reject_bid",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "511": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "512": {
      "op": "assert",
      "stack_out": []
    },
    "513": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "514": {
      "op": "bytec_0 // \"highest_bidder\"",
      "defined_out": [
        "\"highest_bidder\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"highest_bidder\""
      ]
    },
    "515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "516": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "517": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "518": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "519": {
      "op": "assert",
      "stack_out": []
    },
    "520": {
      "op": "itxn_begin"
    },
    "521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "522": {
      "op": "bytec_0 // \"highest_bidder\"",
      "stack_out": [
        "0",
        "\"highest_bidder\""
      ]
    },
    "523": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "524": {
      "error": "check self.highest_bidder exists",
      "op": "assert // check self.highest_bidder exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "526": {
      "op": "bytec_1 // \"highest_bid\"",
      "defined_out": [
        "\"highest_bid\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"highest_bid\""
      ]
    },
    "527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "528": {
      "error": "check self.highest_bid exists",
      "op": "assert // check self.highest_bid exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "529": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "531": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "533": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "534": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "536": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "537": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "539": {
      "op": "itxn_submit"
    },
    "540": {
      "op": "bytec_1 // \"highest_bid\"",
      "stack_out": [
        "\"highest_bid\""
      ]
    },
    "541": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"highest_bid\"",
        "0"
      ]
    },
    "542": {
      "op": "app_global_put",
      "stack_out": []
    },
    "543": {
      "op": "bytec_0 // \"highest_bidder\"",
      "stack_out": [
        "\"highest_bidder\""
      ]
    },
    "544": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "\"highest_bidder\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "545": {
      "op": "app_global_put",
      "stack_out": []
    },
    "546": {
      "retsub": true,
      "op": "retsub"
    },
    "547": {
      "subroutine": "smart_contracts.auction_x.contract.AuctionX.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "552": {
      "op": "assert",
      "stack_out": []
    },
    "553": {
      "op": "itxn_begin"
    },
    "554": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "555": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "556": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "557": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "558": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "560": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "561": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "564": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "566": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "568": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "570": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "571": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "573": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "574": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "576": {
      "op": "itxn_submit"
    },
    "577": {
      "op": "itxn_begin"
    },
    "578": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "580": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "581": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "583": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "584": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "586": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "588": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "589": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "591": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "592": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "594": {
      "op": "itxn_submit"
    },
    "595": {
      "retsub": true,
      "op": "retsub"
    }
  }
}